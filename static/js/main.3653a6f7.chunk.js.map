{"version":3,"sources":["components/Swatch/Swatch.js","components/ContrastSwatch/ContrastSwatch.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Swatch","_ref","color","react_default","a","createElement","className","style","background","contrast","isAccessible","ContrastSwatch","foregroundColor","backgroundColor","ratio","toFixed","score","TableRow","_ref2","swatch","palette","components_Swatch_Swatch","map","columnSwatch","index","key","components_ContrastSwatch_ContrastSwatch","Table","Table_TableRow","App","cleanPalette","filter","match","isCSSColorName","urlPalette","window","location","href","replace","origin","split","forEach","this","length","history","pushState","join","components_Table_Table","Component","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3653a6f7.chunk.js","sourcesContent":["import React from 'react';\nimport contrast from 'get-contrast';\n\nimport './Swatch.scss';\n\nconst Swatch = ({ color }) => (\n  <div className=\"swatch\" style={{background: color, color: contrast.isAccessible('#000', color) ? '#000' : '#fff'}}>\n    {color}\n  </div>\n);\n\nexport default Swatch;\n","import React from 'react';\nimport contrast from 'get-contrast';\n\nimport './ContrastSwatch.scss';\n\nconst ContrastSwatch = ({ foregroundColor, backgroundColor }) => (\n  <div className=\"contrast-swatch\">\n    <div className=\"contrast-swatch__grade\">\n      {contrast.isAccessible(foregroundColor, backgroundColor) ? '✅' : '❌'}\n    </div>\n\n    <div className=\"contrast-swatch__sample\" style={{color: foregroundColor, background: backgroundColor}}>\n      abc\n    </div>\n\n    <div className=\"contrast-swatch__ratio\">\n      {contrast.ratio(foregroundColor, backgroundColor).toFixed(2)} ({contrast.score(foregroundColor, backgroundColor)})\n    </div>\n  </div>\n);\n\nexport default ContrastSwatch;\n","import React from 'react';\n\nimport Swatch from '../Swatch/Swatch';\nimport ContrastSwatch from '../ContrastSwatch/ContrastSwatch';\n\nimport './Table.scss';\n\nconst Table = ({ palette }) => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        <th className=\"table__column-header table__column-header--empty\"></th>\n        {palette.map((swatch, index) => (\n          <th key={index} className=\"table__column-header\">\n            <Swatch color={swatch} />\n          </th>\n        ))}\n      </tr>\n    </thead>\n\n    <tbody>\n      {palette.map((swatch, index) => (\n        <TableRow key={index} swatch={swatch} palette={palette} />\n      ))}\n    </tbody>\n  </table>\n);\n\nconst TableRow = ({ swatch, palette }) => (\n  <tr>\n    <td className=\"table__row-header\"><Swatch color={swatch} /></td>\n\n    {palette.map((columnSwatch, index) => (\n      <td key={index} className=\"table__cell\">\n        <ContrastSwatch foregroundColor={columnSwatch} backgroundColor={swatch} />\n      </td>\n    ))}\n  </tr>\n);\n\nexport default Table;\n","import React, { Component } from 'react';\nimport color from 'rgb';\nimport isCSSColorName from 'is-css-color-name';\n\nimport Table from './components/Table/Table';\n\nimport './App.scss';\n\nclass App extends Component {\n  cleanPalette = (palette) => {\n    return palette.filter((swatch) => {\n      return swatch.match(/^#|^rgb/) ? color(swatch) : isCSSColorName(swatch);\n    });\n  }\n\n  componentWillMount() {\n    let urlPalette = window.location.href\n      .replace(window.location.origin + '/?', '') // Trim URL\n      .replace(/\\s/g, '') // Trim whitespace\n      .replace(/%20/g, '') // Trim escaped whitespace\n      .replace(/(,)(\\d)/g, '|$2') // Use '|' as a placeholder for ',' in rgb and rgba definitions\n      .split(','); // Create array of values\n\n    // Replace placeholder '|' with ','\n    urlPalette.forEach((swatch, index) => {\n      urlPalette[index] = swatch.replace(/\\|/g, ',');\n    });\n\n    urlPalette = this.cleanPalette(urlPalette);\n\n    if (urlPalette.length) {\n      this.palette = urlPalette\n    } else {\n      this.palette = [\n        'white',\n        'black',\n        'rgb(100,100,100)',\n        'rgba(200,200,200,0.5)',\n        '#ef5350',\n        '#ec407a',\n        '#ab47bc',\n        '#7e57c2',\n        '#5c6bc0',\n        '#42a5f5',\n        '#29b6f6',\n        '#26c6da',\n        '#26a69a',\n        '#66bb6a',\n        '#9ccc65',\n        '#d4e157',\n        '#ffee58',\n        '#ffca28',\n        '#ffa726',\n        '#ff7043',\n        '#8d6e63',\n        '#bdbdbd',\n        '#78909c',\n      ];\n    }\n\n    window.history.pushState(null, null, window.location.origin + '/?' + this.palette.join(','));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Table palette={this.palette} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}