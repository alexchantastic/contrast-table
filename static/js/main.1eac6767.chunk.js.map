{"version":3,"sources":["components/swatch/swatch.js","components/contrast-swatch/contrast-swatch.js","components/table/table.js","App.js","serviceWorker.js","index.js"],"names":["Swatch","_ref","color","react_default","a","createElement","className","style","background","contrast","isAccessible","Emoji","_ref2","character","label","rest","Object","objectWithoutProperties","assign","role","aria-label","ContrastSwatch","foregroundColor","backgroundColor","ratio","toFixed","score","bodyTextPass","largeTextPass","title","concat","contrast_swatch_Emoji","TableRow","swatch","palette","components_swatch_swatch","map","columnSwatch","index","key","contrast_swatch_contrast_swatch","Table","table_TableRow","App","cleanPalette","filter","match","isCSSColorName","urlPalette","window","location","href","replace","origin","pathname","split","forEach","this","length","history","replaceState","join","table_table","Component","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1eac6767.chunk.js","sourcesContent":["import React from 'react';\nimport contrast from 'get-contrast';\n\nimport './swatch.scss';\n\nconst Swatch = ({ color }) => (\n  <div className=\"swatch\" style={{background: color, color: contrast.isAccessible('#000', color) ? '#000' : '#fff'}}>\n    {color}\n  </div>\n);\n\nexport default Swatch;\n","import React from 'react';\nimport contrast from 'get-contrast';\n\nimport './contrast-swatch.scss';\n\nconst minBodyTextRatio = 4.5;\nconst minLargeTextRatio = 3;\n\nconst ContrastSwatch = ({ foregroundColor, backgroundColor }) => {\n  const ratio = contrast.ratio(foregroundColor, backgroundColor).toFixed(2);\n  const score = contrast.score(foregroundColor, backgroundColor);\n\n  const bodyTextPass = ratio >= minBodyTextRatio;\n  const largeTextPass = ratio >= minLargeTextRatio;\n\n  return (\n    <div className=\"contrast-swatch\">\n      <div className=\"contrast-swatch__grades\">\n        <div className=\"contrast-swatch__grade\" title={`Body text ${bodyTextPass ? 'pass' : 'fail'}`}>\n          <Emoji character=\"🔡\" label=\"Small text\" className=\"contrast-swatch__grade-label\" />\n          {bodyTextPass ?\n            <Emoji character=\"✅\" label=\"Pass\" /> :\n            <Emoji character=\"❌\" label=\"Fail\" />\n          }\n        </div>\n\n        <div className=\"contrast-swatch__grade\" title={`Large-scale text ${largeTextPass ? 'pass' : 'fail'}`}>\n          <Emoji character=\"🔠\" label=\"Large text\" className=\"contrast-swatch__grade-label\" />\n          {largeTextPass ?\n            <Emoji character=\"✅\" label=\"Pass\" /> :\n            <Emoji character=\"❌\" label=\"Fail\" />\n          }\n        </div>\n      </div>\n\n      <div className=\"contrast-swatch__sample\" style={{color: foregroundColor, background: backgroundColor}}>\n        abc\n      </div>\n\n      <div className=\"contrast-swatch__ratio\">\n        {ratio} ({score})\n      </div>\n    </div>\n  );\n};\n\nconst Emoji = ({character, label, ...rest}) => (\n  <span role=\"img\" aria-label={label} {...rest}>{character}</span>\n)\n\nexport default ContrastSwatch;\n","import React from 'react';\n\nimport Swatch from '../swatch/swatch';\nimport ContrastSwatch from '../contrast-swatch/contrast-swatch';\n\nimport './table.scss';\n\nconst Table = ({ palette }) => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        <th className=\"table__column-header table__column-header--empty\"></th>\n        {palette.map((swatch, index) => (\n          <th key={index} className=\"table__column-header\">\n            <Swatch color={swatch} />\n          </th>\n        ))}\n      </tr>\n    </thead>\n\n    <tbody>\n      {palette.map((swatch, index) => (\n        <TableRow key={index} swatch={swatch} palette={palette} />\n      ))}\n    </tbody>\n  </table>\n);\n\nconst TableRow = ({ swatch, palette }) => (\n  <tr>\n    <td className=\"table__row-header\"><Swatch color={swatch} /></td>\n\n    {palette.map((columnSwatch, index) => (\n      <td key={index} className=\"table__cell\">\n        <ContrastSwatch foregroundColor={columnSwatch} backgroundColor={swatch} />\n      </td>\n    ))}\n  </tr>\n);\n\nexport default Table;\n","import React, { Component } from 'react';\nimport color from 'rgb';\nimport isCSSColorName from 'is-css-color-name';\n\nimport Table from './components/table/table';\n\nclass App extends Component {\n  cleanPalette = (palette) => {\n    return palette.filter((swatch) => {\n      return swatch.match(/^#|^rgb/) ? color(swatch) : isCSSColorName(swatch);\n    });\n  }\n\n  componentWillMount() {\n    let urlPalette = window.location.href\n      .replace(window.location.origin + window.location.pathname + '?', '') // Trim URL\n      .replace(/\\s/g, '') // Trim whitespace\n      .replace(/%20/g, '') // Trim escaped whitespace\n      .replace(/(,)(\\d)/g, '|$2') // Use '|' as a placeholder for ',' in rgb and rgba definitions\n      .split(','); // Create array of values\n\n    // Replace placeholder '|' with ','\n    urlPalette.forEach((swatch, index) => {\n      urlPalette[index] = swatch.replace(/\\|/g, ',');\n    });\n\n    urlPalette = this.cleanPalette(urlPalette);\n\n    if (urlPalette.length) {\n      this.palette = urlPalette\n    } else {\n      this.palette = [\n        'white',\n        'black',\n        'rgb(100,100,100)',\n        'rgba(200,200,200,0.5)',\n        '#ef5350',\n        '#ec407a',\n        '#ab47bc',\n        '#7e57c2',\n        '#5c6bc0',\n        '#42a5f5',\n        '#29b6f6',\n        '#26c6da',\n        '#26a69a',\n        '#66bb6a',\n        '#9ccc65',\n        '#d4e157',\n        '#ffee58',\n        '#ffca28',\n        '#ffa726',\n        '#ff7043',\n        '#8d6e63',\n        '#bdbdbd',\n        '#78909c',\n      ];\n    }\n\n    window.history.replaceState(null, null, window.location.origin + window.location.pathname + '?' + this.palette.join(','));\n  }\n\n  render() {\n    return (\n      <div>\n        <Table palette={this.palette} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}